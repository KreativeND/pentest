/**
 * v0 by Vercel.
 * @see https://v0.dev/t/RFDjk7UNbfZ
 * Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
 */
"use client";

import { useState, useMemo } from "react";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import {
  Table,
  TableHeader,
  TableRow,
  TableHead,
  TableBody,
  TableCell,
} from "@/components/ui/table";

export default function TestPageComponent() {
  const [searchTerm, setSearchTerm] = useState("");
  const [sortColumn, setSortColumn] = useState("id");
  const [sortDirection, setSortDirection] = useState("asc");
  const [selectedTest, setSelectedTest] = useState(null);
  const testCases = [
    {
      id: "TC001",
      name: "Verify user login functionality",
      risk: "high",
      status: "passed",
      lastRun: "2023-05-15",
      description: "Test the login process for valid and invalid credentials.",
      preconditions: "User has an active account.",
      steps: [
        "Navigate to the login page",
        "Enter valid username and password",
        "Click the login button",
        "Verify the user is logged in successfully",
      ],
      expectedResults: "User is logged in and directed to the dashboard.",
      actualResults: "User logged in successfully.",
      attachments: [
        { name: "login_screenshot.png", url: "/login_screenshot.png" },
      ],
    },
    {
      id: "TC002",
      name: "Validate password reset functionality",
      risk: "medium",
      status: "failed",
      lastRun: "2023-05-12",
      description: "Test the password reset process for various scenarios.",
      preconditions: "User has an active account.",
      steps: [
        "Navigate to the password reset page",
        "Enter a valid email address",
        "Click the reset password button",
        "Verify the user receives a password reset email",
        "Follow the instructions in the email to reset the password",
        "Verify the user can log in with the new password",
      ],
      expectedResults: "User can successfully reset their password.",
      actualResults: "Password reset email not received.",
      attachments: [
        { name: "password_reset_error.png", url: "/password_reset_error.png" },
      ],
    },
    {
      id: "TC003",
      name: "Verify user registration process",
      risk: "low",
      status: "passed",
      lastRun: "2023-05-10",
      description: "Test the user registration process from start to finish.",
      preconditions: "User does not have an existing account.",
      steps: [
        "Navigate to the registration page",
        "Enter valid user information",
        "Click the register button",
        "Verify the user receives a confirmation email",
        "Follow the instructions in the email to activate the account",
        "Verify the user can log in with the new account",
      ],
      expectedResults:
        "User can successfully register and activate their account.",
      actualResults: "User registered and account activated successfully.",
      attachments: [
        {
          name: "registration_confirmation.png",
          url: "/registration_confirmation.png",
        },
      ],
    },
    {
      id: "TC004",
      name: "Validate user profile update functionality",
      risk: "medium",
      status: "passed",
      lastRun: "2023-05-08",
      description:
        "Test the user profile update process for various scenarios.",
      preconditions: "User has an active account and is logged in.",
      steps: [
        "Navigate to the user profile page",
        "Update the user information (name, email, password)",
        "Click the save changes button",
        "Verify the user information is updated successfully",
        "Log out and log back in to confirm the changes",
      ],
      expectedResults:
        "User can successfully update their profile information.",
      actualResults: "User profile updated successfully.",
      attachments: [
        {
          name: "profile_update_screenshot.png",
          url: "/profile_update_screenshot.png",
        },
      ],
    },
    {
      id: "TC005",
      name: "Verify email notification settings",
      risk: "low",
      status: "failed",
      lastRun: "2023-05-05",
      description:
        "Test the email notification settings for various scenarios.",
      preconditions: "User has an active account and is logged in.",
      steps: [
        "Navigate to the notification settings page",
        "Enable/disable various email notification options",
        "Click the save changes button",
        "Verify the user receives/does not receive emails as per the settings",
      ],
      expectedResults:
        "User can successfully manage their email notification settings.",
      actualResults: "Some email notifications not working as expected.",
      attachments: [
        {
          name: "notification_settings_error.png",
          url: "/notification_settings_error.png",
        },
      ],
    },
  ];
  const filteredTests = useMemo(() => {
    return testCases
      .filter((test) => {
        return (
          test.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
          test.description.toLowerCase().includes(searchTerm.toLowerCase())
        );
      })
      .sort((a, b) => {
        if (sortDirection === "asc") {
          return a[sortColumn] > b[sortColumn] ? 1 : -1;
        } else {
          return a[sortColumn] < b[sortColumn] ? 1 : -1;
        }
      });
  }, [searchTerm, sortColumn, sortDirection]);
  const handleSort = (column) => {
    if (sortColumn === column) {
      setSortDirection(sortDirection === "asc" ? "desc" : "asc");
    } else {
      setSortColumn(column);
      setSortDirection("asc");
    }
  };
  const handleTestClick = (test: any) => {
    console.log(test, selectedTest);
    if (test.id == selectedTest?.id) {
      setSelectedTest(null);
    } else setSelectedTest(test);
  };
  return (
    <div className="flex">
      <div className="flex-1 border-r border-gray-200 dark:border-gray-800 p-6">
        <div className="flex items-center justify-between mb-4">
          <h1 className="text-2xl font-bold">Test Cases</h1>
          <div className="flex items-center gap-2">
            <Input
              type="search"
              placeholder="Search tests..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="bg-gray-100 dark:bg-gray-800 dark:text-gray-50"
            />
            <Button variant="outline">Export</Button>
            <Button>Create Test</Button>
          </div>
        </div>
        <Table>
          <TableHeader>
            <TableRow>
              <TableHead
                className="cursor-pointer"
                onClick={() => handleSort("id")}
              >
                ID{" "}
                {sortColumn === "id" && (
                  <span className="ml-1">
                    {sortDirection === "asc" ? "\u2191" : "\u2193"}
                  </span>
                )}
              </TableHead>
              <TableHead
                className="cursor-pointer"
                onClick={() => handleSort("name")}
              >
                Name{" "}
                {sortColumn === "name" && (
                  <span className="ml-1">
                    {sortDirection === "asc" ? "\u2191" : "\u2193"}
                  </span>
                )}
              </TableHead>
              <TableHead
                className="cursor-pointer"
                onClick={() => handleSort("risk")}
              >
                Risk{" "}
                {sortColumn === "risk" && (
                  <span className="ml-1">
                    {sortDirection === "asc" ? "\u2191" : "\u2193"}
                  </span>
                )}
              </TableHead>
              <TableHead
                className="cursor-pointer"
                onClick={() => handleSort("status")}
              >
                Status{" "}
                {sortColumn === "status" && (
                  <span className="ml-1">
                    {sortDirection === "asc" ? "\u2191" : "\u2193"}
                  </span>
                )}
              </TableHead>
              <TableHead
                className="cursor-pointer"
                onClick={() => handleSort("lastRun")}
              >
                Last Run{" "}
                {sortColumn === "lastRun" && (
                  <span className="ml-1">
                    {sortDirection === "asc" ? "\u2191" : "\u2193"}
                  </span>
                )}
              </TableHead>
            </TableRow>
          </TableHeader>
          <TableBody>
            {filteredTests.map((test) => (
              <TableRow
                key={test.id}
                onClick={() => handleTestClick(test)}
                className="cursor-pointer hover:bg-gray-100 dark:hover:bg-gray-800"
              >
                <TableCell className="font-medium">{test.id}</TableCell>
                <TableCell>{test.name}</TableCell>
                <TableCell
                  className={`font-medium ${
                    test.risk === "high"
                      ? "text-red-500"
                      : test.risk === "medium"
                      ? "text-yellow-500"
                      : "text-green-500"
                  }`}
                >
                  {test.risk}
                </TableCell>
                <TableCell
                  className={`font-medium ${
                    test.status === "passed" ? "text-green-500" : "text-red-500"
                  }`}
                >
                  {test.status}
                </TableCell>
                <TableCell>{test.lastRun}</TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
      </div>
      {selectedTest && (
        <div className="flex-1 p-6">
          <div className="flex items-center justify-between mb-4">
            <h2 className="text-xl font-bold">{selectedTest.name}</h2>
            <div className="flex items-center gap-2">
              <Button variant="outline">Edit</Button>
              <Button variant="outline">Delete</Button>
            </div>
          </div>
          <div className="grid gap-4">
            <div>
              <h3 className="text-lg font-medium mb-2">Description</h3>
              <p>{selectedTest.description}</p>
            </div>
            <div>
              <h3 className="text-lg font-medium mb-2">Preconditions</h3>
              <p>{selectedTest.preconditions}</p>
            </div>
            <div>
              <h3 className="text-lg font-medium mb-2">Steps</h3>
              <ol className="list-decimal list-inside">
                {selectedTest.steps.map((step, index) => (
                  <li key={index}>{step}</li>
                ))}
              </ol>
            </div>
            <div>
              <h3 className="text-lg font-medium mb-2">Expected Results</h3>
              <p>{selectedTest.expectedResults}</p>
            </div>
            <div>
              <h3 className="text-lg font-medium mb-2">Actual Results</h3>
              <p>{selectedTest.actualResults}</p>
            </div>
            <div>
              <h3 className="text-lg font-medium mb-2">Attachments</h3>
              <div className="grid grid-cols-2 gap-4">
                {selectedTest.attachments.map((attachment, index) => (
                  <div key={index} className="flex items-center gap-2">
                    <PaperclipIcon className="w-4 h-4" />
                    <a
                      href="#"
                      target="_blank"
                      rel="noopener noreferrer"
                      className="text-blue-500 hover:underline"
                    >
                      {attachment.name}
                    </a>
                  </div>
                ))}
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}

function PaperclipIcon(props: any) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="m21.44 11.05-9.19 9.19a6 6 0 0 1-8.49-8.49l8.57-8.57A4 4 0 1 1 18 8.84l-8.59 8.57a2 2 0 0 1-2.83-2.83l8.49-8.48" />
    </svg>
  );
}
